{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tootips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a02ae97c.chunk.js","sourcesContent":["import React from 'react'\r\nimport './InfoBox.css';\r\nimport {Card, CardContent, Typography} from \"@material-ui/core\";\r\n\r\nfunction InfoBox({title, cases, isRed, active, total, ...props}) {\r\n    return (\r\n        <Card onClick ={props.onClick} className={`infoBox ${active && 'infoBox--selected'} ${isRed && \"infoBox--red\"}`}>\r\n            <CardContent>\r\n                <Typography className=\"infoBox__title\" color = \"textSecondary\">{title}</Typography>\r\n\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n\r\n                <Typography className=\"infoBox__total\" color = \"textSecondary\">{total} Total</Typography>\r\n\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport {Circle, Popup} from 'react-leaflet';\r\n\r\nconst casesTypeColors = {\r\n    cases:{\r\n        hex:'#CC1034',\r\n        multiplier:800,\r\n    },\r\n    recovered:{\r\n        hex:'#7dd71d',\r\n        multiplier:1200,\r\n    },\r\n    deaths:{\r\n        hex:'#fb4443',\r\n        multiplier:2000,\r\n    },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a,b)=>{\r\n        if(a.cases > b.cases)\r\n        return -1;\r\n        else return 1;\r\n    })\r\n    return sortedData;\r\n}\r\n\r\nexport const showDataOnMap = (data, casesType = 'cases') =>\r\n    data.map((country)=>(\r\n        <Circle\r\n        center = {[country.countryInfo.lat, country.countryInfo.long]}\r\n        fillOpacity ={0.4}\r\n        color={casesTypeColors[casesType].hex}\r\n        fillColor={casesTypeColors[casesType].hex}\r\n        radius = {\r\n            Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n        }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div className='info-flag'\r\n                    style = {{ backgroundImage: `url(${country.countryInfo.flag})`}}\r\n                    />\r\n                    <div className='info-name'>{country.country}</div>\r\n                    <div className='info-confirmed'>Cases:{numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className='info-recovered'>Recovered:{numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className='info-deaths'>Deaths:{numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n\r\n        </Circle>\r\n\r\n    ));\r\n","import React from 'react';\r\nimport './Map.css'\r\nimport {Map as LeafletMap, TileLayer} from 'react-leaflet';\r\nimport { showDataOnMap } from './util';\r\n\r\nfunction Map({countries, casesType, center, zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n           <LeafletMap center={center} zoom={zoom}>\r\n               <TileLayer\r\n               url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n               attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n\r\n            />  \r\n            {showDataOnMap(countries, casesType)}\r\n           </LeafletMap>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport './Table.css';\r\n\r\nfunction Table({countries}) {   \r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases}) =>(\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n\r\n","import React, {useState, useEffect} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\nconst options = {\r\n    legend:{\r\n        display: false,\r\n    },\r\n    elements:{\r\n        point:{\r\n            radius:2,\r\n        },\r\n    },\r\n    maintainAspectRatio : false,\r\n    tootips:{\r\n            mode:\"index\" ,\r\n            intersect: false,\r\n            callbacks :{\r\n                label: function (tooltipItem, data)\r\n                {\r\n                    return numeral(tooltipItem.value).format(\"+0.0\");\r\n                },\r\n            },\r\n\r\n    },\r\n    scales:{\r\n        xAxes:[\r\n            {\r\n                type: \"time\",\r\n                time : {\r\n                    format :\"MM/DD/YY\",\r\n                    tooltipFormat : \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes:[\r\n            {\r\n                gridLines:\r\n                {\r\n                    display : false,\r\n                },\r\n                ticks:{\r\n                    callback: function (value, index, values)\r\n                    {\r\n                        return numeral(value).format(\"0a\")\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n}\r\n\r\nconst buildChartData = (data, casesType='cases') =>{\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n\r\n    for(let date in data.cases){\r\n        if(lastDataPoint)\r\n        {\r\n            const newDataPoint ={\r\n                x:date,\r\n                y:data[casesType][date] - lastDataPoint\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n\r\n};\r\n\r\nfunction LineGraph({casesType = \"cases\", ...props}) {\r\n    const [data, setData] = useState({});    \r\n\r\n    useEffect(()=>{\r\n        const fetchData = async () =>{\r\n            fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n            .then(response => response.json())\r\n            .then(data =>{\r\n                let chartData = buildChartData(data, 'cases');\r\n                setData(chartData);             \r\n            });\r\n        }\r\n\r\n        fetchData();\r\n        \r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div className={props.className}>\r\n        {data?.length >0 && (\r\n            <Line \r\n                options = {options}\r\n                data={{\r\n                    datasets: [\r\n                    {\r\n                        backgroundColor:\"rgba(204, 16, 52,0.5)\",\r\n                        borderColor:\"#CC1034\",\r\n                        data: data\r\n                    },\r\n                ],\r\n            }}\r\n        />\r\n    )}    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React, { useState, useEffect } from 'react';\nimport {MenuItem, FormControl,Select, Card, CardContent} from \"@material-ui/core\";\nimport InfoBox from './InfoBox';  \nimport Map from './Map';\nimport Table from './Table';\nimport numeral, { format } from 'numeral';\nimport './App.css';\nimport { sortData } from './util';\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css';\n\nfunction App() {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = \n  useState({ lat : 20.5937, lng : 78.9629});\n  const [mapZoom, setMapZoom] = useState(3.5);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n\n  useEffect(()=>{\n    fetch('https://disease.sh/v3/covid-19/all')\n    .then(response => response.json())\n    .then(data =>{\n      setCountryInfo(data);\n    });\n  }, []);\n\n  useEffect(()=>{\n    const getCountriesData = async()=>{\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response)=> response.json())\n      .then((data)=>{\n        const countries = data.map((country)=>(\n          {\n            name : country.country,\n            value : country.countryInfo.iso2,\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n      });\n    };\n    getCountriesData();\n  },[]);\n\n  const onCountryChange = async (event) =>{\n    const countryCode = event.target.value;\n\n    const url = \n      countryCode === \"worldwide\" \n        ? \"https://disease.sh/v3/covid-19/all\"\n        : \"https://disease.sh/v3/covid-19/countries/\" + countryCode;\n\n    await fetch(url)\n    .then(response => response.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n      \n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(3.5);\n    });\n  };\n  \n  return (\n    <div className=\"app\">\n      <div className = \"app_left\">\n        <div className=\"app__header\">\n        <h1>CORONA TIMES</h1>\n          <FormControl className=\"app__dropdown\">\n          <Select variant = \"outlined\" onChange={onCountryChange} value ={country}>  \n          <MenuItem value = \"worldwide\">Worldwide</MenuItem>\n            {\n              countries.map((country)=>(\n                <MenuItem value = {country.value}>{country.name}</MenuItem>\n              ))}\n\n          </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox isRed active = {casesType === \"cases\"} onClick = {e => setCasesType('cases')}\n           title = \"New Corona Cases\" cases = {numeral(countryInfo.todayCases).format(\"+0,0\")} total = {numeral(countryInfo.cases).format(\"0,0\")}/>\n\n          <InfoBox className = \"infoBox__recoveredCases\" active = {casesType === \"recovered\"} onClick = {e => setCasesType('recovered')} \n          title = \"Recovered\" cases = {numeral(countryInfo.todayRecovered).format(\"+0,0\")} total = {numeral(countryInfo.recovered).format(\"0,0\")}/>\n\n          <InfoBox isRed active = {casesType === \"deaths\"} onClick = {e => setCasesType('deaths')} \n          title = \"Deaths\" cases = {numeral(countryInfo.todayDeaths).format(\"+0,0\")} total = {numeral(countryInfo.deaths).format(\"0,0\")}/>\n\n\n        </div>\n\n         <Map casesType = {casesType} countries = {mapCountries} center={mapCenter} zoom={mapZoom}\n         />\n      </div>\n\n      \n        <Card className=\"app__right\">\n          <CardContent>\n            <h3>Global Status</h3>\n            <Table countries={tableData}/>\n            <h3 className =\"app__graphTitle\">Worldwide New Cases</h3>\n            <LineGraph className=\"app__graph\"  />\n          </CardContent>\n           \n\n        </Card>\n        <div className = \"footer\">\n          <h4>by Lavanya Paradkar</h4>\n        </div>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}